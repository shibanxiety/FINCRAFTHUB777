{"version":3,"file":"outputModels.js","sourceRoot":"","sources":["../../../src/generated/outputModels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/** Response for the languages API. */\nexport interface GetLanguagesResultOutput {\n  /** Languages that support translate API. */\n  translation?: Record<string, TranslationLanguageOutput>;\n  /** Languages that support transliteration API. */\n  transliteration?: Record<string, TransliterationLanguageOutput>;\n  /** Languages that support dictionary API. */\n  dictionary?: Record<string, SourceDictionaryLanguageOutput>;\n}\n\n/**\n * The value of the translation property is a dictionary of (key, value) pairs. Each key is a BCP 47 language tag.\n * A key identifies a language for which text can be translated to or translated from.\n */\nexport interface TranslationLanguageOutput {\n  /** Display name of the language in the locale requested via Accept-Language header. */\n  name: string;\n  /** Display name of the language in the locale native for this language. */\n  nativeName: string;\n  /** Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. */\n  dir: string;\n}\n\n/**\n * The value of the transliteration property is a dictionary of (key, value) pairs.\n * Each key is a BCP 47 language tag. A key identifies a language for which text can be converted from one script\n * to another script.\n */\nexport interface TransliterationLanguageOutput {\n  /** Display name of the language in the locale requested via Accept-Language header. */\n  name: string;\n  /** Display name of the language in the locale native for this language. */\n  nativeName: string;\n  /** List of scripts to convert from. */\n  scripts: Array<TransliterableScriptOutput>;\n}\n\n/** Script definition with list of script into which given script can be translitered. */\nexport interface TransliterableScriptOutput extends CommonScriptModelOutput {\n  /** List of scripts available to convert text to. */\n  toScripts: Array<CommonScriptModelOutput>;\n}\n\n/** Common properties of language script */\nexport interface CommonScriptModelOutput {\n  /** Code identifying the script. */\n  code: string;\n  /** Display name of the script in the locale requested via Accept-Language header. */\n  name: string;\n  /** Display name of the language in the locale native for the language. */\n  nativeName: string;\n  /** Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. */\n  dir: string;\n}\n\n/** Properties ot the source dictionary language */\nexport interface SourceDictionaryLanguageOutput {\n  /** Display name of the language in the locale requested via Accept-Language header. */\n  name: string;\n  /** Display name of the language in the locale native for this language. */\n  nativeName: string;\n  /** Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. */\n  dir: string;\n  /** List of languages with alterative translations and examples for the query expressed in the source language. */\n  translations: Array<TargetDictionaryLanguageOutput>;\n}\n\n/** Properties of the target dictionary language */\nexport interface TargetDictionaryLanguageOutput {\n  /** Display name of the language in the locale requested via Accept-Language header. */\n  name: string;\n  /** Display name of the language in the locale native for this language. */\n  nativeName: string;\n  /** Directionality, which is rtl for right-to-left languages or ltr for left-to-right languages. */\n  dir: string;\n  /** Language code identifying the target language. */\n  code: string;\n}\n\n/** Representation of the Error Response from Translator Service. */\nexport interface ErrorResponseOutput {\n  /** Error details. */\n  error: ErrorDetailsOutput;\n}\n\n/** Error details as returned by Translator Service. */\nexport interface ErrorDetailsOutput {\n  /** Number indetifier of the error. */\n  code: number;\n  /** Human readable error description. */\n  message: string;\n}\n\n/** Element containing the translated text */\nexport interface TranslatedTextItemOutput {\n  /** The detectedLanguage property is only present in the result object when language auto-detection is requested. */\n  detectedLanguage?: DetectedLanguageOutput;\n  /**\n   * An array of translation results. The size of the array matches the number of target\n   * languages specified through the to query parameter.\n   */\n  translations: Array<TranslationOutput>;\n  /**\n   * Input text in the default script of the source language. sourceText property is present only when\n   * the input is expressed in a script that's not the usual script for the language. For example,\n   * if the input were Arabic written in Latin script, then sourceText.text would be the same Arabic text\n   * converted into Arab script.\n   */\n  sourceText?: SourceTextOutput;\n}\n\n/** An object describing the detected language. */\nexport interface DetectedLanguageOutput {\n  /** A string representing the code of the detected language. */\n  language: string;\n  /**\n   * A float value indicating the confidence in the result.\n   * The score is between zero and one and a low score indicates a low confidence.\n   */\n  score: number;\n}\n\n/** Translation result */\nexport interface TranslationOutput {\n  /** A string representing the language code of the target language. */\n  to: string;\n  /** A string giving the translated text. */\n  text: string;\n  /** An object giving the translated text in the script specified by the toScript parameter. */\n  transliteration?: TransliterationOutput;\n  /** Alignment information. */\n  alignment?: TranslatedTextAlignmentOutput;\n  /** Sentence boundaries in the input and output texts. */\n  sentLen?: SentenceLengthOutput;\n}\n\n/** An object giving the translated text in the script specified by the toScript parameter. */\nexport interface TransliterationOutput {\n  /** A string specifying the target script. */\n  script: string;\n  /** A string giving the translated text in the target script. */\n  text: string;\n}\n\n/** Alignment information object. */\nexport interface TranslatedTextAlignmentOutput {\n  /**\n   * Maps input text to translated text. The alignment information is only provided when the request\n   * parameter includeAlignment is true. Alignment is returned as a string value of the following\n   * format: [[SourceTextStartIndex]:[SourceTextEndIndex]â€“[TgtTextStartIndex]:[TgtTextEndIndex]].\n   * The colon separates start and end index, the dash separates the languages, and space separates the words.\n   * One word may align with zero, one, or multiple words in the other language, and the aligned words may\n   * be non-contiguous. When no alignment information is available, the alignment element will be empty.\n   */\n  proj: string;\n}\n\n/** An object returning sentence boundaries in the input and output texts. */\nexport interface SentenceLengthOutput {\n  /**\n   * An integer array representing the lengths of the sentences in the input text.\n   * The length of the array is the number of sentences, and the values are the length of each sentence.\n   */\n  srcSentLen: number[];\n  /**\n   * An integer array representing the lengths of the sentences in the translated text.\n   * The length of the array is the number of sentences, and the values are the length of each sentence.\n   */\n  transSentLen: number[];\n}\n\n/** Input text in the default script of the source language. */\nexport interface SourceTextOutput {\n  /** Input text in the default script of the source language. */\n  text: string;\n}\n\n/** Transliterated text element. */\nexport interface TransliteratedTextOutput {\n  /** A string which is the result of converting the input string to the output script. */\n  text: string;\n  /** A string specifying the script used in the output. */\n  script: string;\n}\n\n/** Elemented containing break sentence result. */\nexport interface BreakSentenceItemOutput {\n  /** The detectedLanguage property is only present in the result object when language auto-detection is requested. */\n  detectedLanguage?: DetectedLanguageOutput;\n  /**\n   * An integer array representing the lengths of the sentences in the input text.\n   * The length of the array is the number of sentences, and the values are the length of each sentence.\n   */\n  sentLen: number[];\n}\n\n/** Dictionary Lookup Element */\nexport interface DictionaryLookupItemOutput {\n  /**\n   * A string giving the normalized form of the source term.\n   * For example, if the request is \"JOHN\", the normalized form will be \"john\".\n   * The content of this field becomes the input to lookup examples.\n   */\n  normalizedSource: string;\n  /**\n   * A string giving the source term in a form best suited for end-user display.\n   * For example, if the input is \"JOHN\", the display form will reflect the usual\n   * spelling of the name: \"John\".\n   */\n  displaySource: string;\n  /** A list of translations for the source term. */\n  translations: Array<DictionaryTranslationOutput>;\n}\n\n/** Translation source term. */\nexport interface DictionaryTranslationOutput {\n  /**\n   * A string giving the normalized form of this term in the target language.\n   * This value should be used as input to lookup examples.\n   */\n  normalizedTarget: string;\n  /**\n   * A string giving the term in the target language and in a form best suited\n   * for end-user display. Generally, this will only differ from the normalizedTarget\n   * in terms of capitalization. For example, a proper noun like \"Juan\" will have\n   * normalizedTarget = \"juan\" and displayTarget = \"Juan\".\n   */\n  displayTarget: string;\n  /** A string associating this term with a part-of-speech tag. */\n  posTag: string;\n  /**\n   * A value between 0.0 and 1.0 which represents the \"confidence\"\n   * (or perhaps more accurately, \"probability in the training data\") of that translation pair.\n   * The sum of confidence scores for one source word may or may not sum to 1.0.\n   */\n  confidence: number;\n  /**\n   * A string giving the word to display as a prefix of the translation. Currently,\n   * this is the gendered determiner of nouns, in languages that have gendered determiners.\n   * For example, the prefix of the Spanish word \"mosca\" is \"la\", since \"mosca\" is a feminine noun in Spanish.\n   * This is only dependent on the translation, and not on the source.\n   * If there is no prefix, it will be the empty string.\n   */\n  prefixWord: string;\n  /**\n   * A list of \"back translations\" of the target. For example, source words that the target can translate to.\n   * The list is guaranteed to contain the source word that was requested (e.g., if the source word being\n   * looked up is \"fly\", then it is guaranteed that \"fly\" will be in the backTranslations list).\n   * However, it is not guaranteed to be in the first position, and often will not be.\n   */\n  backTranslations: Array<BackTranslationOutput>;\n}\n\n/** Back Translation */\nexport interface BackTranslationOutput {\n  /**\n   * A string giving the normalized form of the source term that is a back-translation of the target.\n   * This value should be used as input to lookup examples.\n   */\n  normalizedText: string;\n  /**\n   * A string giving the source term that is a back-translation of the target in a form best\n   * suited for end-user display.\n   */\n  displayText: string;\n  /**\n   * An integer representing the number of examples that are available for this translation pair.\n   * Actual examples must be retrieved with a separate call to lookup examples. The number is mostly\n   * intended to facilitate display in a UX. For example, a user interface may add a hyperlink\n   * to the back-translation if the number of examples is greater than zero and show the back-translation\n   * as plain text if there are no examples. Note that the actual number of examples returned\n   * by a call to lookup examples may be less than numExamples, because additional filtering may be\n   * applied on the fly to remove \"bad\" examples.\n   */\n  numExamples: number;\n  /**\n   * An integer representing the frequency of this translation pair in the data. The main purpose of this\n   * field is to provide a user interface with a means to sort back-translations so the most frequent terms are first.\n   */\n  frequencyCount: number;\n}\n\n/** Dictionary Example element */\nexport interface DictionaryExampleItemOutput {\n  /**\n   * A string giving the normalized form of the source term. Generally, this should be identical\n   * to the value of the Text field at the matching list index in the body of the request.\n   */\n  normalizedSource: string;\n  /**\n   * A string giving the normalized form of the target term. Generally, this should be identical\n   * to the value of the Translation field at the matching list index in the body of the request.\n   */\n  normalizedTarget: string;\n  /** A list of examples for the (source term, target term) pair. */\n  examples: Array<DictionaryExampleOutput>;\n}\n\n/** Dictionary Example */\nexport interface DictionaryExampleOutput {\n  /**\n   * The string to concatenate before the value of sourceTerm to form a complete example.\n   * Do not add a space character, since it is already there when it should be.\n   * This value may be an empty string.\n   */\n  sourcePrefix: string;\n  /**\n   * A string equal to the actual term looked up. The string is added with sourcePrefix\n   * and sourceSuffix to form the complete example. Its value is separated so it can be\n   * marked in a user interface, e.g., by bolding it.\n   */\n  sourceTerm: string;\n  /**\n   * The string to concatenate after the value of sourceTerm to form a complete example.\n   * Do not add a space character, since it is already there when it should be.\n   * This value may be an empty string.\n   */\n  sourceSuffix: string;\n  /** A string similar to sourcePrefix but for the target. */\n  targetPrefix: string;\n  /** A string similar to sourceTerm but for the target. */\n  targetTerm: string;\n  /** A string similar to sourceSuffix but for the target. */\n  targetSuffix: string;\n}\n"]}