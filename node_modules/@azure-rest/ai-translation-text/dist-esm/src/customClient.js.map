{"version":3,"file":"customClient.js","sourceRoot":"","sources":["../../src/customClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"@azure/core-rest-pipeline\";\nimport { TextTranslationClient } from \"./generated/clientDefinitions\";\nimport {\n  TranslatorCredential,\n  TranslatorAuthenticationPolicy,\n  TranslatorAzureKeyAuthenticationPolicy,\n} from \"./authentication\";\nimport { AzureKeyCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\n\nconst DEFAULT_SCOPE = \"https://cognitiveservices.azure.com/.default\";\nconst DEFAULT_ENPOINT = \"https://api.cognitive.microsofttranslator.com\";\nconst PLATFORM_HOST = \"cognitiveservices\";\nconst PLATFORM_PATH = \"/translator/text/v3.0\";\n\nfunction isKeyCredential(credential: any): credential is KeyCredential {\n  return (credential as KeyCredential)?.key !== undefined;\n}\n\nfunction isTranslatorKeyCredential(credential: any): credential is TranslatorCredential {\n  return (credential as TranslatorCredential)?.key !== undefined;\n}\n\n/** Policy that sets the api-version (or equivalent) to reflect the library version. */\nconst apiVersionPolicy = {\n  name: \"MTApiVersionPolicy\",\n  async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n    const param = request.url.split(\"?\");\n    if (param.length > 1) {\n      const newParams = param[1].split(\"&\");\n      newParams.push(\"api-version=3.0\");\n      request.url = param[0] + \"?\" + newParams.join(\"&\");\n    } else {\n      // no query parameters in request url\n      request.url = param[0] + \"?api-version=3.0\";\n    }\n    return next(request);\n  },\n};\n\n/**\n * Initialize a new instance of `TextTranslationClient`\n * @param endpoint type: string, Supported Text Translation endpoints (protocol and hostname, for example:\n *     https://api.cognitive.microsofttranslator.com).\n * @param options type: ClientOptions, the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: undefined | string,\n  credential: undefined | TranslatorCredential | KeyCredential | TokenCredential = undefined,\n  options: ClientOptions = {}\n): TextTranslationClient {\n  let serviceEndpoint: string;\n  if (!endpoint) {\n    serviceEndpoint = DEFAULT_ENPOINT;\n  } else if (endpoint.toLowerCase().indexOf(PLATFORM_HOST) !== -1) {\n    serviceEndpoint = `${endpoint}${PLATFORM_PATH}`;\n  } else {\n    serviceEndpoint = endpoint;\n  }\n\n  const baseUrl = options.baseUrl ?? `${serviceEndpoint}`;\n\n  const userAgentInfo = `azsdk-js-ai-translation-text-rest/1.0.0-beta.1`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n  };\n\n  const client = getClient(baseUrl, options) as TextTranslationClient;\n  client.pipeline.addPolicy(apiVersionPolicy);\n\n  if (isTranslatorKeyCredential(credential)) {\n    const mtAuthneticationPolicy = new TranslatorAuthenticationPolicy(\n      credential as TranslatorCredential\n    );\n    client.pipeline.addPolicy(mtAuthneticationPolicy);\n  } else if (isKeyCredential(credential)) {\n    const mtKeyAuthenticationPolicy = new TranslatorAzureKeyAuthenticationPolicy(\n      credential as AzureKeyCredential\n    );\n    client.pipeline.addPolicy(mtKeyAuthenticationPolicy);\n  } else if (credential) {\n    client.pipeline.addPolicy(\n      coreRestPipeline.bearerTokenAuthenticationPolicy({\n        credential: credential as TokenCredential,\n        scopes: DEFAULT_SCOPE,\n      })\n    );\n  }\n\n  return client;\n}\n"]}